digraph G {
/* Node 139683275581520 (block) */
139683275581520 [shape="record" label="<HEAD> BLOCK | <ptr139683275509008> STMT | <ptr139683275581584> STMT "];
139683275581520:ptr139683275509008 -> 139683275509008
/* Node 139683275509008 (if statement) */
139683275509008 [shape="record" label="<HEAD> IF | <ptr139683275508688> EXPR | <then> THEN | <ptr139683275508752> BLOCK"]
139683275509008:ptr139683275508688 -> 139683275508688/* Node 139683275508688 (binary operator) */
139683275508688 [label="=="]
139683275508688 -> 139683276643152
139683275508688 -> 139683276555344
/* Node 139683276643152 (symbol) */
139683276643152 [label="symbol: action"]
/* End node 139683276643152 */
/* Node 139683276555344 (string literal) */
139683276555344 [label="string literal: initialize"]
/* End node 139683276555344 */
/* End node 139683275508688 */
139683275509008:ptr139683275508752 -> 139683275508752/* Node 139683275508752 (block) */
139683275508752 [shape="record" label="<HEAD> BLOCK | <ptr139683275508880> STMT "];
139683275508752:ptr139683275508880 -> 139683275508880
/* Node 139683275508880 (binary operator) */
139683275508880 [label="="]
139683275508880 -> 139683275508432
139683275508880 -> 139683275508816
/* Node 139683275508432 (symbol) */
139683275508432 [label="symbol: current"]
/* End node 139683275508432 */
/* Node 139683275508816 (string literal) */
139683275508816 [label="string literal: light1"]
/* End node 139683275508816 */
/* End node 139683275508880 */
/* End node 139683275508752 */
/* End node 139683275509008 */
139683275581520:ptr139683275581584 -> 139683275581584
/* Node 139683275581584 (if statement) */
139683275581584 [shape="record" label="<HEAD> IF | <ptr139683275509072> EXPR | <then> THEN | <ptr139683275581392> BLOCK"]
139683275581584:ptr139683275509072 -> 139683275509072/* Node 139683275509072 (binary operator) */
139683275509072 [label="=="]
139683275509072 -> 139683275508944
139683275509072 -> 139683275509136
/* Node 139683275508944 (symbol) */
139683275508944 [label="symbol: action"]
/* End node 139683275508944 */
/* Node 139683275509136 (string literal) */
139683275509136 [label="string literal: event"]
/* End node 139683275509136 */
/* End node 139683275509072 */
139683275581584:ptr139683275581392 -> 139683275581392/* Node 139683275581392 (block) */
139683275581392 [shape="record" label="<HEAD> BLOCK | <ptr139683275580176> STMT | <ptr139683275581456> STMT "];
139683275581392:ptr139683275580176 -> 139683275580176
/* Node 139683275580176 (if statement) */
139683275580176 [shape="record" label="<HEAD> IF | <ptr139683275509584> EXPR | <then> THEN | <ptr139683275579984> BLOCK"]
139683275580176:ptr139683275509584 -> 139683275509584/* Node 139683275509584 (binary operator) */
139683275509584 [label="and"]
139683275509584 -> 139683275509392
139683275509584 -> 139683275509456
/* Node 139683275509392 (binary operator) */
139683275509392 [label="=="]
139683275509392 -> 139683275509200
139683275509392 -> 139683275509264
/* Node 139683275509200 (symbol) */
139683275509200 [label="symbol: key"]
/* End node 139683275509200 */
/* Node 139683275509264 (string literal) */
139683275509264 [label="string literal: 1"]
/* End node 139683275509264 */
/* End node 139683275509392 */
/* Node 139683275509456 (binary operator) */
139683275509456 [label="=="]
139683275509456 -> 139683275509328
139683275509456 -> 139683275509520
/* Node 139683275509328 (symbol) */
139683275509328 [label="symbol: state"]
/* End node 139683275509328 */
/* Node 139683275509520 (string literal) */
139683275509520 [label="string literal: down"]
/* End node 139683275509520 */
/* End node 139683275509456 */
/* End node 139683275509584 */
139683275580176:ptr139683275579984 -> 139683275579984/* Node 139683275579984 (block) */
139683275579984 [shape="record" label="<HEAD> BLOCK | <ptr139683275579536> STMT | <ptr139683275579728> STMT | <ptr139683275579856> STMT | <ptr139683275580048> STMT "];
139683275579984:ptr139683275579536 -> 139683275579536
/* Node 139683275579536 (function) */
139683275579536 [shape="record" label="<HEAD> CALL | printf | <ptr139683275509712> EXPR"]
139683275579536:ptr139683275509712 -> 139683275509712/* Node 139683275509712 (string literal) */
139683275509712 [label="string literal: Hit key 1"]
/* End node 139683275509712 */
/* End node 139683275579536 */
139683275579984:ptr139683275579728 -> 139683275579728
/* Node 139683275579728 (function) */
139683275579728 [shape="record" label="<HEAD> CALL | openhab | <ptr139683275579664> EXPR | <ptr139683275579600> EXPR"]
139683275579728:ptr139683275579664 -> 139683275579664/* Node 139683275579664 (string literal) */
139683275579664 [label="string literal: Light_hFF_Office_Light"]
/* End node 139683275579664 */
139683275579728:ptr139683275579600 -> 139683275579600/* Node 139683275579600 (string literal) */
139683275579600 [label="string literal: OFF"]
/* End node 139683275579600 */
/* End node 139683275579728 */
139683275579984:ptr139683275579856 -> 139683275579856
/* Node 139683275579856 (function) */
139683275579856 [shape="record" label="<HEAD> CALL | say | <ptr139683275579792> EXPR"]
139683275579856:ptr139683275579792 -> 139683275579792/* Node 139683275579792 (string literal) */
139683275579792 [label="string literal: light is off"]
/* End node 139683275579792 */
/* End node 139683275579856 */
139683275579984:ptr139683275580048 -> 139683275580048
/* Node 139683275580048 (binary operator) */
139683275580048 [label="="]
139683275580048 -> 139683275509648
139683275580048 -> 139683275579920
/* Node 139683275509648 (symbol) */
139683275509648 [label="symbol: current"]
/* End node 139683275509648 */
/* Node 139683275579920 (string literal) */
139683275579920 [label="string literal: light1"]
/* End node 139683275579920 */
/* End node 139683275580048 */
/* End node 139683275579984 */
/* End node 139683275580176 */
139683275581392:ptr139683275581456 -> 139683275581456
/* Node 139683275581456 (if statement) */
139683275581456 [shape="record" label="<HEAD> IF | <ptr139683275580560> EXPR | <then> THEN | <ptr139683275581264> BLOCK"]
139683275581456:ptr139683275580560 -> 139683275580560/* Node 139683275580560 (binary operator) */
139683275580560 [label="and"]
139683275580560 -> 139683275580368
139683275580560 -> 139683275580432
/* Node 139683275580368 (binary operator) */
139683275580368 [label="=="]
139683275580368 -> 139683275580112
139683275580368 -> 139683275580304
/* Node 139683275580112 (symbol) */
139683275580112 [label="symbol: key"]
/* End node 139683275580112 */
/* Node 139683275580304 (string literal) */
139683275580304 [label="string literal: 2"]
/* End node 139683275580304 */
/* End node 139683275580368 */
/* Node 139683275580432 (binary operator) */
139683275580432 [label="=="]
139683275580432 -> 139683275580240
139683275580432 -> 139683275580496
/* Node 139683275580240 (symbol) */
139683275580240 [label="symbol: state"]
/* End node 139683275580240 */
/* Node 139683275580496 (string literal) */
139683275580496 [label="string literal: down"]
/* End node 139683275580496 */
/* End node 139683275580432 */
/* End node 139683275580560 */
139683275581456:ptr139683275581264 -> 139683275581264/* Node 139683275581264 (block) */
139683275581264 [shape="record" label="<HEAD> BLOCK | <ptr139683275580816> STMT | <ptr139683275581072> STMT | <ptr139683275581136> STMT | <ptr139683275581328> STMT "];
139683275581264:ptr139683275580816 -> 139683275580816
/* Node 139683275580816 (function) */
139683275580816 [shape="record" label="<HEAD> CALL | printf | <ptr139683275580752> EXPR"]
139683275580816:ptr139683275580752 -> 139683275580752/* Node 139683275580752 (string literal) */
139683275580752 [label="string literal: Hit key 2"]
/* End node 139683275580752 */
/* End node 139683275580816 */
139683275581264:ptr139683275581072 -> 139683275581072
/* Node 139683275581072 (function) */
139683275581072 [shape="record" label="<HEAD> CALL | openhab | <ptr139683275580944> EXPR | <ptr139683275580880> EXPR"]
139683275581072:ptr139683275580944 -> 139683275580944/* Node 139683275580944 (string literal) */
139683275580944 [label="string literal: Light_hFF_Office_Light"]
/* End node 139683275580944 */
139683275581072:ptr139683275580880 -> 139683275580880/* Node 139683275580880 (string literal) */
139683275580880 [label="string literal: ON"]
/* End node 139683275580880 */
/* End node 139683275581072 */
139683275581264:ptr139683275581136 -> 139683275581136
/* Node 139683275581136 (function) */
139683275581136 [shape="record" label="<HEAD> CALL | say | <ptr139683275581008> EXPR"]
139683275581136:ptr139683275581008 -> 139683275581008/* Node 139683275581008 (string literal) */
139683275581008 [label="string literal: light is on"]
/* End node 139683275581008 */
/* End node 139683275581136 */
139683275581264:ptr139683275581328 -> 139683275581328
/* Node 139683275581328 (binary operator) */
139683275581328 [label="="]
139683275581328 -> 139683275580624
139683275581328 -> 139683275581200
/* Node 139683275580624 (symbol) */
139683275580624 [label="symbol: current"]
/* End node 139683275580624 */
/* Node 139683275581200 (string literal) */
139683275581200 [label="string literal: light2"]
/* End node 139683275581200 */
/* End node 139683275581328 */
/* End node 139683275581264 */
/* End node 139683275581456 */
/* End node 139683275581392 */
/* End node 139683275581584 */
/* End node 139683275581520 */
}